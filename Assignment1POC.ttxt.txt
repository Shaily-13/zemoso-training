saile@LAPTOP-OMF15UU0 MINGW64 ~ (master)
$ cd D:

saile@LAPTOP-OMF15UU0 MINGW64 /d
$ mkdir first_git_repo

saile@LAPTOP-OMF15UU0 MINGW64 /d
$ cd first_git_repo

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo
$ git init
Initialized empty Git repository in D:/first_git_repo/.git/

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ ls

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ touch hello_world.txt

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ vi hello_world.txt

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git add hello_world.txt
warning: in the working copy of 'hello_world.txt', LF will be replaced by CRLF the next time Git touches it

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git commit -m "commit1"
[master (root-commit) b0b3753] commit1
 1 file changed, 1 insertion(+)
 create mode 100644 hello_world.txt

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git remote add origin https://github.com/Shaily-13/zemoso-training.git

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git push origin master -f
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Delta compression using up to 12 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 1.38 KiB | 1.38 MiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/Shaily-13/zemoso-training.git
 * [new branch]      master -> master

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git branch
* master

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git grep -l ' to ' | xargs sed -i 's/ to / Shailendra /g' hello_world.txt

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ cat hello_world.txt
 Git development began in April 2005 after many developers of the Linux kernel gave up access Shailendra BitKeeper, a proprietary source control management system that had previously been used Shailendra maintain the project.[10] The copyright holder of BitKeeper, Larry McVoy, had withdrawn gratis use of the product after claiming that Andrew Tridgell had reverse-engineered the BitKeeper protocols. Torvalds wanted a distributed system that he could use like BitKeeper, but none of the available free systems met his needs, particularly in terms of performance. Torvalds took an example of an SCM system requiring thirty seconds Shailendra apply a patch and update all associated metadata, and noted that this would not scale Shailendra the needs of Linux kernel development, where syncing with fellow maintainers could require 250 such actions at a time. He wanted patching Shailendra take three seconds,[6] and had several other design criteria in mind: take Concurrent Versions System (CVS) as an example of what not Shailendra do; if in doubt, make the exact opposite decision[8] support a distributed, BitKeeper-like workflow[8] very strong safeguards against corruption, either accidental or malicious.[7] These three criteria eliminated every then-existing version control system, except for Monotone. Considering performance excluded this too.[8] So immediately after the 2.6.12-rc2 Linux kernel development release,[8] Torvalds set out Shailendra write his own.[8] Torvalds has quipped about the name git, which is British English slang meaning "unpleasant person". Torvalds said: "I'm an egotistical bastard, and I name all my projects after myself. First 'Linux', now 'git'."[11][12] The man page describes Git as "the stupid content tracker".[13] The development of Git began on 3 April 2005.[14] The project was announced on 6 April,[15] and became self-hosting as of 7 April.[14] The first merge of multiple branches was done on 18 April.[16] Torvalds achieved his performance goals; on 29 April, the nascent Git was benchmarked recording patches Shailendra the Linux kernel tree at the rate of 6.7 per second.[17] On 16 June Git managed the kernel 2.6.12 release.[18] Torvalds turned over maintenance on 26 July 2005 Shailendra Junio Hamano, a major contributor Shailendra the project.[19] Hamano was responsible for the 1.0 release on 21 December 2005, and remains the project's maintainer.[20]

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git add hello_world.txt
warning: in the working copy of 'hello_world.txt', LF will be replaced by CRLF the next time Git touches it

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git commit -m "committed"
[master 5c417b7] committed
 1 file changed, 1 insertion(+), 1 deletion(-)

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git push origin master -f
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 12 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 365 bytes | 365.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/Shaily-13/zemoso-training.git
   b0b3753..5c417b7  master -> master

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git reflog
5c417b7 (HEAD -> master, origin/master) HEAD@{0}: commit: committed
b0b3753 HEAD@{1}: commit (initial): commit1

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ ^C

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git revert 5c417b7
[master 1c933d6] commitRevert "committed"
 1 file changed, 1 insertion(+), 1 deletion(-)

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ cat hello_world.txt
 Git development began in April 2005 after many developers of the Linux kernel gave up access to BitKeeper, a proprietary source control management system that had previously been used to maintain the project.[10] The copyright holder of BitKeeper, Larry McVoy, had withdrawn gratis use of the product after claiming that Andrew Tridgell had reverse-engineered the BitKeeper protocols. Torvalds wanted a distributed system that he could use like BitKeeper, but none of the available free systems met his needs, particularly in terms of performance. Torvalds took an example of an SCM system requiring thirty seconds to apply a patch and update all associated metadata, and noted that this would not scale to the needs of Linux kernel development, where syncing with fellow maintainers could require 250 such actions at a time. He wanted patching to take three seconds,[6] and had several other design criteria in mind: take Concurrent Versions System (CVS) as an example of what not to do; if in doubt, make the exact opposite decision[8] support a distributed, BitKeeper-like workflow[8] very strong safeguards against corruption, either accidental or malicious.[7] These three criteria eliminated every then-existing version control system, except for Monotone. Considering performance excluded this too.[8] So immediately after the 2.6.12-rc2 Linux kernel development release,[8] Torvalds set out to write his own.[8] Torvalds has quipped about the name git, which is British English slang meaning "unpleasant person". Torvalds said: "I'm an egotistical bastard, and I name all my projects after myself. First 'Linux', now 'git'."[11][12] The man page describes Git as "the stupid content tracker".[13] The development of Git began on 3 April 2005.[14] The project was announced on 6 April,[15] and became self-hosting as of 7 April.[14] The first merge of multiple branches was done on 18 April.[16] Torvalds achieved his performance goals; on 29 April, the nascent Git was benchmarked recording patches to the Linux kernel tree at the rate of 6.7 per second.[17] On 16 June Git managed the kernel 2.6.12 release.[18] Torvalds turned over maintenance on 26 July 2005 to Junio Hamano, a major contributor to the project.[19] Hamano was responsible for the 1.0 release on 21 December 2005, and remains the project's maintainer.[20]

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git add hello_world.txt

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git commit -m "committed"
On branch master
nothing to commit, working tree clean

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git branch new_branch

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ git checkout new_branch
Switched to branch 'new_branch'

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (new_branch)
$ ls
hello_world.txt

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (new_branch)
$ cat hello_word.txt
cat: hello_word.txt: No such file or directory

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (new_branch)
$ cat hello_world.txt
 Git development began in April 2005 after many developers of the Linux kernel gave up access to BitKeeper, a proprietary source control management system that had previously been used to maintain the project.[10] The copyright holder of BitKeeper, Larry McVoy, had withdrawn gratis use of the product after claiming that Andrew Tridgell had reverse-engineered the BitKeeper protocols. Torvalds wanted a distributed system that he could use like BitKeeper, but none of the available free systems met his needs, particularly in terms of performance. Torvalds took an example of an SCM system requiring thirty seconds to apply a patch and update all associated metadata, and noted that this would not scale to the needs of Linux kernel development, where syncing with fellow maintainers could require 250 such actions at a time. He wanted patching to take three seconds,[6] and had several other design criteria in mind: take Concurrent Versions System (CVS) as an example of what not to do; if in doubt, make the exact opposite decision[8] support a distributed, BitKeeper-like workflow[8] very strong safeguards against corruption, either accidental or malicious.[7] These three criteria eliminated every then-existing version control system, except for Monotone. Considering performance excluded this too.[8] So immediately after the 2.6.12-rc2 Linux kernel development release,[8] Torvalds set out to write his own.[8] Torvalds has quipped about the name git, which is British English slang meaning "unpleasant person". Torvalds said: "I'm an egotistical bastard, and I name all my projects after myself. First 'Linux', now 'git'."[11][12] The man page describes Git as "the stupid content tracker".[13] The development of Git began on 3 April 2005.[14] The project was announced on 6 April,[15] and became self-hosting as of 7 April.[14] The first merge of multiple branches was done on 18 April.[16] Torvalds achieved his performance goals; on 29 April, the nascent Git was benchmarked recording patches to the Linux kernel tree at the rate of 6.7 per second.[17] On 16 June Git managed the kernel 2.6.12 release.[18] Torvalds turned over maintenance on 26 July 2005 to Junio Hamano, a major contributor to the project.[19] Hamano was responsible for the 1.0 release on 21 December 2005, and remains the project's maintainer.[20]

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (new_branch)
$
$ git grep -l ' Torvalds ' | xargs sed -i 's/ Torvalds / Shailendra /g' hello_world.txt
bash: $: command not found

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (new_branch)
$ git grep -l ' Torvalds ' | xargs sed -i 's/ Torvalds / Shailendra /g' hello_world.txt

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (new_branch)
$ cat hello_world.txt
 Git development began in April 2005 after many developers of the Linux kernel gave up access to BitKeeper, a proprietary source control management system that had previously been used to maintain the project.[10] The copyright holder of BitKeeper, Larry McVoy, had withdrawn gratis use of the product after claiming that Andrew Tridgell had reverse-engineered the BitKeeper protocols. Shailendra wanted a distributed system that he could use like BitKeeper, but none of the available free systems met his needs, particularly in terms of performance. Shailendra took an example of an SCM system requiring thirty seconds to apply a patch and update all associated metadata, and noted that this would not scale to the needs of Linux kernel development, where syncing with fellow maintainers could require 250 such actions at a time. He wanted patching to take three seconds,[6] and had several other design criteria in mind: take Concurrent Versions System (CVS) as an example of what not to do; if in doubt, make the exact opposite decision[8] support a distributed, BitKeeper-like workflow[8] very strong safeguards against corruption, either accidental or malicious.[7] These three criteria eliminated every then-existing version control system, except for Monotone. Considering performance excluded this too.[8] So immediately after the 2.6.12-rc2 Linux kernel development release,[8] Shailendra set out to write his own.[8] Shailendra has quipped about the name git, which is British English slang meaning "unpleasant person". Shailendra said: "I'm an egotistical bastard, and I name all my projects after myself. First 'Linux', now 'git'."[11][12] The man page describes Git as "the stupid content tracker".[13] The development of Git began on 3 April 2005.[14] The project was announced on 6 April,[15] and became self-hosting as of 7 April.[14] The first merge of multiple branches was done on 18 April.[16] Shailendra achieved his performance goals; on 29 April, the nascent Git was benchmarked recording patches to the Linux kernel tree at the rate of 6.7 per second.[17] On 16 June Git managed the kernel 2.6.12 release.[18] Shailendra turned over maintenance on 26 July 2005 to Junio Hamano, a major contributor to the project.[19] Hamano was responsible for the 1.0 release on 21 December 2005, and remains the project's maintainer.[20]

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (new_branch)
$ git add hello_world.txt
warning: in the working copy of 'hello_world.txt', LF will be replaced by CRLF the next time Git touches it

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (new_branch)
$ git commit -m "committed"
[new_branch 7447db8] committed
 1 file changed, 1 insertion(+), 1 deletion(-)

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (new_branch)
$ git push origin new_branch -f
Enumerating objects: 8, done.
Counting objects: 100% (8/8), done.
Delta compression using up to 12 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (6/6), 771 bytes | 385.00 KiB/s, done.
Total 6 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 1 local object.
remote:
remote: Create a pull request for 'new_branch' on GitHub by visiting:
remote:      https://github.com/Shaily-13/zemoso-training/pull/new/new_branch
remote:
To https://github.com/Shaily-13/zemoso-training.git
 * [new branch]      new_branch -> new_branch

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (new_branch)
$ git checkout master
Switched to branch 'master'

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ mkdir git_clone_repo

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo (master)
$ cd git_clone_repo

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo/git_clone_repo (master)
$ git clone https://github.com/Shaily-13/zemoso-training.git
Cloning into 'zemoso-training'...
remote: Enumerating objects: 11, done.
remote: Counting objects: 100% (11/11), done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 11 (delta 3), reused 8 (delta 2), pack-reused 0
Receiving objects: 100% (11/11), done.
Resolving deltas: 100% (3/3), done.

saile@LAPTOP-OMF15UU0 MINGW64 /d/first_git_repo/git_clone_repo (master)
$
